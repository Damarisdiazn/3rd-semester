using System;

class Nodo
{
    public int Valor; // Almacena el valor del nodo
    public Nodo Izquierdo, Derecho; // Referencias a los nodos hijos

    public Nodo(int valor)
    {
        Valor = valor;
        Izquierdo = Derecho = null;
    }
}


class ArbolBinario
{
    private Nodo raiz;

    public void Insertar(int valor)
    {
        raiz = InsertarRec(raiz, valor);
    }

    private Nodo InsertarRec(Nodo nodo, int valor)
    {
        if (nodo == null)
            return new Nodo(valor);

        if (valor < nodo.Valor)
            nodo.Izquierdo = InsertarRec(nodo.Izquierdo, valor);
        else if (valor > nodo.Valor)
            nodo.Derecho = InsertarRec(nodo.Derecho, valor);

        return nodo;
    }

    public bool Buscar(int valor)
    {
        return BuscarRec(raiz, valor);
    }

    private bool BuscarRec(Nodo nodo, int valor)
    {
        if (nodo == null)
            return false;

        if (valor == nodo.Valor)
            return true;
        else if (valor < nodo.Valor)
            return BuscarRec(nodo.Izquierdo, valor);
        else
            return BuscarRec(nodo.Derecho, valor);
    }

    public void Inorden()
    {
        InordenRec(raiz);
        Console.WriteLine();
    }

    private void InordenRec(Nodo nodo)
    {
        if (nodo != null)
        {
            InordenRec(nodo.Izquierdo);
            Console.Write(nodo.Valor + " ");
            InordenRec(nodo.Derecho);
        }
    }
}

class Programa
{
    static void Main()
    {
        ArbolBinario arbol = new ArbolBinario();
        int opcion, valor;

        do
        {
            Console.WriteLine("\nMENU DE OPERACIONES:");
            Console.WriteLine("1. Insertar un valor");
            Console.WriteLine("2. Buscar un valor");
            Console.WriteLine("3. Mostrar en Inorden");
            Console.WriteLine("4. Salir");
            Console.Write("Ingrese su opción: ");


            if (!int.TryParse(Console.ReadLine(), out opcion))
            {
                Console.WriteLine("Error: Ingrese un número válido.");
                continue; // Volver al inicio del bucle
            }

            switch (opcion)
            {
                case 1:
                    Console.Write("Ingrese el valor a insertar: ");
                    if (int.TryParse(Console.ReadLine(), out valor))
                    {
                        arbol.Insertar(valor);
                        Console.WriteLine($"Valor {valor} insertado correctamente.");
                    }
                    else
                    {
                        Console.WriteLine("Error: Ingrese un número entero válido.");
                    }
                    break;

                case 2:
                    Console.Write("Ingrese el valor a buscar: ");
                    if (int.TryParse(Console.ReadLine(), out valor))
                    {
                        Console.WriteLine(arbol.Buscar(valor) ? "El valor existe en el árbol." : "El valor no está en el árbol.");
                    }
                    else
                    {
                        Console.WriteLine("Error: Ingrese un número entero válido.");
                    }
                    break;

                case 3:
                    Console.WriteLine("Recorrido en Inorden:");
                    arbol.Inorden();
                    break;

                case 4:
                    Console.WriteLine("Saliendo...");
                    break;

                default:
                    Console.WriteLine("Error: Opción no válida.");
                    break;
            }
        } while (opcion != 4);
    }
}
